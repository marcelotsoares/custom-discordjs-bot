import {BotUserModel} from '../models/bot-user.js';
import {Message} from 'discord.js'
import {CustomBotClient} from '../classes/custom-bot-client.class.js';

interface IConfigExpUser {
    expRatioByDefaultRole: number;
    expPerCharacter: number;
    neededExpToTheNextLevel: number;
    maxLevel: number;
}

export class LevelController {
    customBotClient: CustomBotClient;

    private configExp: IConfigExpUser = {
        expRatioByDefaultRole: 1.0,
        expPerCharacter: 80,
        neededExpToTheNextLevel: 5000,
        maxLevel: 99,
    }

    constructor() {};

    async generateXpBasedOnRole(message: Message) {
        let experienceToUser = 0
        const gerateXpBasedOnTextLength = Number(message.content.length) * this.configExp.expPerCharacter;

        experienceToUser = Math.floor(gerateXpBasedOnTextLength * this.configExp.expRatioByDefaultRole) / 100

        return experienceToUser
    }

    async giveExpToUserByMessage(message: Message) {
        const discord_id = message.author.id
        
        const user = await BotUserModel.findOne({discordId: discord_id})
        if(user) {

            const userExpGenerated = await this.generateXpBasedOnRole(message)
            
            console.log(`[2] [level:controller:generateXP] To user <${message.author.username}:${discord_id}:${userExpGenerated} Exp Generated By Default Role (Ratio: ${this.configExp.expRatioByDefaultRole})>`)

            if(userExpGenerated) {
                user.xp += Number(userExpGenerated.toFixed(2))
            }
            
            if (user.xp >= this.configExp.neededExpToTheNextLevel && user.level < this.configExp.maxLevel) {
                user.level++
                user.coins++
                user.xp = 0
                console.log(`VocÃª passou de nivel (${user.level})`)
            }

            await user.save()
        };
    };
}